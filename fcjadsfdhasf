[1mdiff --git a/fdklsf b/fdklsf[m
[1mdeleted file mode 100644[m
[1mindex 58101ab..0000000[m
[1m--- a/fdklsf[m
[1m+++ /dev/null[m
[36m@@ -1,413 +0,0 @@[m
[31m-[1mdiff --git a/package-lock.json b/package-lock.json[m[m
[31m-[1mindex 64871de..161d59e 100644[m[m
[31m-[1m--- a/package-lock.json[m[m
[31m-[1m+++ b/package-lock.json[m[m
[31m-[36m@@ -29,6 +29,7 @@[m[m
[31m-         "bcrypt": "^5.1.1",[m[m
[31m-         "class-transformer": "^0.5.1",[m[m
[31m-         "class-validator": "^0.14.1",[m[m
[31m-[32m+[m[32m        "cors": "^2.8.5",[m[m
[31m-         "crypto-js": "^4.2.0",[m[m
[31m-         "dotenv": "^16.4.5",[m[m
[31m-         "mysql2": "^3.9.7",[m[m
[31m-[1mdiff --git a/package.json b/package.json[m[m
[31m-[1mindex 7a697e5..c2c2f53 100644[m[m
[31m-[1m--- a/package.json[m[m
[31m-[1m+++ b/package.json[m[m
[31m-[36m@@ -40,6 +40,7 @@[m[m
[31m-     "bcrypt": "^5.1.1",[m[m
[31m-     "class-transformer": "^0.5.1",[m[m
[31m-     "class-validator": "^0.14.1",[m[m
[31m-[32m+[m[32m    "cors": "^2.8.5",[m[m
[31m-     "crypto-js": "^4.2.0",[m[m
[31m-     "dotenv": "^16.4.5",[m[m
[31m-     "mysql2": "^3.9.7",[m[m
[31m-[1mdiff --git a/src/common/database/entities/test.entity.ts b/src/common/database/entities/test.entity.ts[m[m
[31m-[1mindex 4aa3cd0..83c44c0 100644[m[m
[31m-[1m--- a/src/common/database/entities/test.entity.ts[m[m
[31m-[1m+++ b/src/common/database/entities/test.entity.ts[m[m
[31m-[36m@@ -51,9 +51,8 @@[m [mexport class Test extends Model<Test> {[m[m
[31m-     type: DataType.STRING,[m[m
[31m-     allowNull: true,[m[m
[31m-   })[m[m
[31m-[31m-  remarks: string; // Uncommented this line[m[m
[31m-[32m+[m[32m  remarks: string;[m[m
[31m- [m[m
[31m-[31m-  // Define association with User model[m[m
[31m-   @ForeignKey(() => User)[m[m
[31m-   @Column({[m[m
[31m-     type: DataType.UUID,[m[m
[31m-[1mdiff --git a/src/common/database/entities/user.entity.ts b/src/common/database/entities/user.entity.ts[m[m
[31m-[1mindex 8dec555..15196ae 100644[m[m
[31m-[1m--- a/src/common/database/entities/user.entity.ts[m[m
[31m-[1m+++ b/src/common/database/entities/user.entity.ts[m[m
[31m-[36m@@ -18,6 +18,13 @@[m [mexport class User extends Model<User> {[m[m
[31m-     })[m[m
[31m-     id: string;[m[m
[31m- [m[m
[31m-[32m+[m[32m    @Column({[m[m
[31m-[32m+[m[32m        type:DataType.UUID,[m[m
[31m-[32m+[m[32m        defaultValue: DataType.UUIDV4,[m[m
[31m-[32m+[m[32m        allowNull : false,[m[m
[31m-[32m+[m[32m    })[m[m
[31m-[32m+[m[32m    employeeId: string;[m[m
[31m-[32m+[m[m
[31m-     @Column({[m[m
[31m-         type: DataType.STRING,[m[m
[31m-         allowNull: false,[m[m
[31m-[36m@@ -34,13 +41,7 @@[m [mexport class User extends Model<User> {[m[m
[31m-         type: DataType.STRING,[m[m
[31m-         allowNull: false,[m[m
[31m-     })[m[m
[31m-[31m-    firstName: string;[m[m
[31m-[31m-[m[m
[31m-[31m-    @Column({[m[m
[31m-[31m-        type: DataType.STRING,[m[m
[31m-[31m-        allowNull: false,[m[m
[31m-[31m-    })[m[m
[31m-[31m-    lastName: string;[m[m
[31m-[32m+[m[32m    fullName: string;[m[m
[31m- [m[m
[31m-     @Column({[m[m
[31m-         type: DataType.DOUBLE,[m[m
[31m-[1mdiff --git a/src/helpers/utilities.helper.ts b/src/helpers/utilities.helper.ts[m[m
[31m-[1mindex dba3ed5..b7f402e 100644[m[m
[31m-[1m--- a/src/helpers/utilities.helper.ts[m[m
[31m-[1m+++ b/src/helpers/utilities.helper.ts[m[m
[31m-[36m@@ -1,5 +1,6 @@[m[m
[31m- import * as bcrypt from 'bcrypt';[m[m
[31m- import * as CryptoJS from 'crypto-js';[m[m
[31m-[32m+[m[32mimport * as crypto from 'crypto';[m[m
[31m- import * as otpGenerator from 'otp-generator';[m[m
[31m- import { TIME } from '../constant';[m[m
[31m- import { EM } from '../constant';[m[m
[31m-[36m@@ -29,6 +30,30 @@[m [mexport const decryptCipher = (data: string) => {[m[m
[31m-   );[m[m
[31m-   return parsedToken;[m[m
[31m- };[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32mexport const generateHexadecimal = (name: string) => {[m[m
[31m-[32m+[m[32m  // Combine name, email, and a random component with the current time[m[m
[31m-[32m+[m[32m  const seed = `${name}${Math.floor(Math.random() * 1e6)}${Date.now()}`;[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m  // Create a SHA-256 hash of the seed[m[m
[31m-[32m+[m[32m  const hash = crypto.createHash('sha256');[m[m
[31m-[32m+[m[32m  hash.update(seed);[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m  // Get the hexadecimal representation of the hash[m[m
[31m-[32m+[m[32m  const hexNumber = hash.digest('hex');[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m  // Extract the first 16 characters (or adjust as needed)[m[m
[31m-[32m+[m[32m  const uniqueHex = hexNumber.slice(0, 16);[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m  // Reflect the first 3 characters of the name and email[m[m
[31m-[32m+[m[32m  const reflectedFirstName = name.slice(0, 3).toUpperCase(); // Ensure uppercase, adjust as needed[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m  // Concatenate the unique hex with reflected parts[m[m
[31m-[32m+[m[32m  const combinedId = `${reflectedFirstName}-${uniqueHex}`;[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m  return combinedId;[m[m
[31m-[32m+[m[32m};[m[m
[31m-[32m+[m[m
[31m- export const generateOneTimeCode = ([m[m
[31m-   size: number,[m[m
[31m- ): { otp: string; otpExpires: number } => {[m[m
[31m-[1mdiff --git a/src/main.ts b/src/main.ts[m[m
[31m-[1mindex 28ae722..789a70d 100644[m[m
[31m-[1m--- a/src/main.ts[m[m
[31m-[1m+++ b/src/main.ts[m[m
[31m-[36m@@ -2,15 +2,23 @@[m [mimport { NestFactory } from '@nestjs/core';[m[m
[31m- import { AppModule } from './app.module';[m[m
[31m- import { INestApplication, ValidationPipe } from '@nestjs/common';[m[m
[31m- import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';[m[m
[31m-[32m+[m[32mimport * as cors from 'cors';[m[m
[31m- [m[m
[31m- async function bootstrap() {[m[m
[31m-[31m-  const app = await NestFactory.create(AppModule);[m[m
[31m-[31m-  app.useGlobalPipes(new ValidationPipe());[m[m
[31m-[32m+[m[32m  const app = await NestFactory.create(AppModule, {[m[m
[31m-[32m+[m[32m    logger: ['log', 'error', 'warn'],[m[m
[31m-[32m+[m[32m  });[m[m
[31m-[32m+[m[32m  initMiddlewares(app);[m[m
[31m-   initSwaggerDocs(app); // Initialize Swagger before listening to ensure it's set up[m[m
[31m-   await app.listen(3307);[m[m
[31m-   console.log('Server is running on http://localhost:3307');[m[m
[31m- }[m[m
[31m-[31m-[m[m
[31m-[32m+[m[32masync function initMiddlewares(app: INestApplication) {[m[m
[31m-[32m+[m[32m  app.useGlobalPipes(new ValidationPipe({ transform: true }));[m[m
[31m-[32m+[m[32m  // app.setGlobalPrefix('api/v1');[m[m
[31m-[32m+[m[32m  app.enableCors({ origin: '*' });[m[m
[31m-[32m+[m[32m  app.use(cors());[m[m
[31m-[32m+[m[32m}[m[m
[31m- async function initSwaggerDocs(app: INestApplication) {[m[m
[31m-   const config = new DocumentBuilder()[m[m
[31m-     .setTitle('User')[m[m
[31m-[1mdiff --git a/src/modules/users/users.controller.ts b/src/modules/users/users.controller.ts[m[m
[31m-[1mindex a39d513..679363f 100644[m[m
[31m-[1m--- a/src/modules/users/users.controller.ts[m[m
[31m-[1m+++ b/src/modules/users/users.controller.ts[m[m
[31m-[36m@@ -1,11 +1,13 @@[m[m
[31m- /* eslint-disable prettier/prettier */[m[m
[31m-[31m-import { Post, Controller, Body, HttpException, Get, UseGuards, Req } from "@nestjs/common";[m[m
[31m-[32m+[m[32mimport { Post, Controller, Body, HttpException, Get, UseGuards, Req, Query, Param } from "@nestjs/common";[m[m
[31m- import UserService from './users.service'[m[m
[31m- import * as usersDto from './users.dto'[m[m
[31m- import { successResponse } from '../../helpers/responseHadnlers';[m[m
[31m- import { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger'[m[m
[31m- import { API_OPERATIONS, MESSAGES } from "src/constant"[m[m
[31m- import { AccessTokenGuard } from "src/common/guard/accesstoken.guard";[m[m
[31m-[32m+[m[m
[31m-[32m+[m[m
[31m- @ApiTags('USERS')[m[m
[31m- @Controller('users')[m[m
[31m- export class UserController {[m[m
[31m-[36m@@ -110,6 +112,25 @@[m [mexport class UserController {[m[m
[31m-             throw new HttpException(error.message, error.status);[m[m
[31m-         }[m[m
[31m-     }[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m    // @ApiBearerAuth()[m[m
[31m-[32m+[m[32m    // @UseGuards(AccessTokenGuard)[m[m
[31m-[32m+[m[32m    @Get('searchUser/:page/:limit')[m[m
[31m-[32m+[m[32m    async getDetailOfuser([m[m
[31m-[32m+[m[32m        @Param() params: usersDto.GetParamsRequestDto,[m[m
[31m-[32m+[m[32m        @Query() querys: usersDto.GetFiltersDto): Promise<any> {[m[m
[31m-[32m+[m[32m        try {[m[m
[31m-[32m+[m[32m            console.log("yooo")[m[m
[31m-[32m+[m[32m            // const cleanedQuery = JSON.parse(querys.filters.replace(/\s/g, ''));[m[m
[31m-[32m+[m[32m            const result = await this.userservice.searchUser(params,querys)[m[m
[31m-[32m+[m[32m            return successResponse(MESSAGES.USER.GET_USER_DETAILE, result);[m[m
[31m-[32m+[m[32m        }[m[m
[31m-[32m+[m[32m        catch (error) {[m[m
[31m-[32m+[m[32m            throw new HttpException(error.message, error.status)[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m        }[m[m
[31m-[32m+[m[32m    }[m[m
[31m-[32m+[m[m
[31m-     @ApiBearerAuth()[m[m
[31m-     @UseGuards(AccessTokenGuard)[m[m
[31m-     @ApiOperation(API_OPERATIONS.USER.UPDATE_PASSWORD)[m[m
[31m-[1mdiff --git a/src/modules/users/users.dto.ts b/src/modules/users/users.dto.ts[m[m
[31m-[1mindex 67f6f5b..a8f027d 100644[m[m
[31m-[1m--- a/src/modules/users/users.dto.ts[m[m
[31m-[1m+++ b/src/modules/users/users.dto.ts[m[m
[31m-[36m@@ -1,12 +1,14 @@[m[m
[31m- /* eslint-disable prettier/prettier */[m[m
[31m- import { ApiProperty, PickType } from '@nestjs/swagger';[m[m
[31m-[32m+[m[32mimport { Transform } from 'class-transformer';[m[m
[31m- import {[m[m
[31m-   IsEmail,[m[m
[31m-   IsNotEmpty,[m[m
[31m-   MinLength,[m[m
[31m-   IsNumber,[m[m
[31m-   ValidateIf,[m[m
[31m-[31m-  IsString[m[m
[31m-[32m+[m[32m  IsString,[m[m
[31m-[32m+[m[32m  IsOptional[m[m
[31m- } from 'class-validator';[m[m
[31m- [m[m
[31m- export class IUserRegisterDto {[m[m
[31m-[36m@@ -16,7 +18,7 @@[m [mexport class IUserRegisterDto {[m[m
[31m-   @ApiProperty({[m[m
[31m-     name: 'email',[m[m
[31m-     description: 'Send email if using logintype=EMAIL',[m[m
[31m-[31m-    example: 'note@wallet.com',[m[m
[31m-[32m+[m[32m    example: 'note@gmail.com',[m[m
[31m-     required: true,[m[m
[31m-   })[m[m
[31m-   email?: string;[m[m
[31m-[36m@@ -25,7 +27,7 @@[m [mexport class IUserRegisterDto {[m[m
[31m-   @ValidateIf((object) => !object.email)[m[m
[31m-   @IsNotEmpty()[m[m
[31m-   @ApiProperty({[m[m
[31m-[31m-    name: 'mobileNo',[m[m
[31m-[32m+[m[32m    name: 'mobileNo',[m[41m [m[m
[31m-     description: 'Send mobileNo if using logintype=MOBILE. Length of the mobileNo',[m[m
[31m-     example: '9090012214',[m[m
[31m-     required: true,[m[m
[31m-[36m@@ -35,22 +37,12 @@[m [mexport class IUserRegisterDto {[m[m
[31m-   @IsNotEmpty()[m[m
[31m-   @MinLength(3)[m[m
[31m-   @ApiProperty({[m[m
[31m-[31m-    name: 'firstName',[m[m
[31m-[31m-    description: 'firstName length should be 3 or more than that',[m[m
[31m-[31m-    example: 'Harish',[m[m
[31m-[32m+[m[32m    name: 'fullName',[m[m
[31m-[32m+[m[32m    description: 'fullname length should be 3 or more than that',[m[m
[31m-[32m+[m[32m    example: 'Harish Rana',[m[m
[31m-     required: true[m[m
[31m-   })[m[m
[31m-[31m-  firstName: string;[m[m
[31m-[31m-[m[m
[31m-[31m-  @IsNotEmpty()[m[m
[31m-[31m-  @MinLength(3)[m[m
[31m-[31m-  @ApiProperty({[m[m
[31m-[31m-    name: 'lastName',[m[m
[31m-[31m-    description: 'LastName length should be 3 or more than that',[m[m
[31m-[31m-    example: 'Rana',[m[m
[31m-[31m-    required: true[m[m
[31m-[31m-  })[m[m
[31m-[31m-  lastName: string;[m[m
[31m-[32m+[m[32m  fullName: string;[m[m
[31m-   [m[m
[31m-   @IsNotEmpty()[m[m
[31m-   @MinLength(3)[m[m
[31m-[36m@@ -76,6 +68,73 @@[m [mexport class IUserRegisterDto {[m[m
[31m- [m[m
[31m- export class IUserLoginDto extends PickType(IUserRegisterDto ,['email','mobileNo','password'] as const){[m[m
[31m- [m[m
[31m-[32m+[m[32m}[m[m
[31m-[32m+[m[32mexport class GetFiltersDto {[m[m
[31m-[32m+[m[32m  @IsOptional()[m[m
[31m-[32m+[m[32m  @IsEmail()[m[m
[31m-[32m+[m[32m  @ApiProperty({[m[m
[31m-[32m+[m[32m    name: 'email',[m[m
[31m-[32m+[m[32m    description: 'Send email if using logintype=EMAIL',[m[m
[31m-[32m+[m[32m    example: 'note@gmail.com',[m[m
[31m-[32m+[m[32m    required:false[m[m
[31m-[32m+[m[32m  })[m[m
[31m-[32m+[m[32m  email?: string;[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m  @IsOptional()[m[m
[31m-[32m+[m[32m  @IsString()[m[m
[31m-[32m+[m[32m  @ApiProperty({[m[m
[31m-[32m+[m[32m    name: 'employeeId',[m[m
[31m-[32m+[m[32m    description: 'get the unique id of the employee',[m[m
[31m-[32m+[m[32m    example: 'HAR-7a53046d66c93b5e',[m[m
[31m-[32m+[m[32m    required:false[m[m
[31m-[32m+[m[32m  })[m[m
[31m-[32m+[m[32m  employeeId?: string;[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m  @IsOptional()[m[m
[31m-[32m+[m[32m  @IsNumber()[m[m
[31m-[32m+[m[32m  @ApiProperty({[m[m
[31m-[32m+[m[32m    name: 'mobileNo',[m[41m [m[m
[31m-[32m+[m[32m    description: 'Send mobileNo if using logintype=MOBILE. Length of the mobileNo',[m[m
[31m-[32m+[m[32m    example: '9090012214',[m[m
[31m-[32m+[m[32m    required:false,[m[m
[31m-[32m+[m[32m  })[m[m
[31m-[32m+[m[32m  mobileNo?: number;[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m  @IsOptional()[m[m
[31m-[32m+[m[32m  @ApiProperty({[m[m
[31m-[32m+[m[32m    name: 'fullName',[m[m
[31m-[32m+[m[32m    description: 'fullname length should be 3 or more than that',[m[m
[31m-[32m+[m[32m    example: 'Harish Rana',[m[m
[31m-[32m+[m[32m    required:false[m[m
[31m-[32m+[m[32m  })[m[m
[31m-[32m+[m[32m  fullName?: string;[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m  @IsOptional()[m[m
[31m-[32m+[m[32m  filters?: Record<string, any>; // Allow any filter types[m[m
[31m-[32m+[m[32m}[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32mexport class GetParamsRequestDto {[m[m
[31m-[32m+[m[32m  @ApiProperty({[m[m
[31m-[32m+[m[32m    name: 'page',[m[m
[31m-[32m+[m[32m    description: 'Default page = 1, Enter more than that to retrieve data.',[m[m
[31m-[32m+[m[32m    example: 1,[m[m
[31m-[32m+[m[32m    default: 1,[m[m
[31m-[32m+[m[32m    required: true,[m[m
[31m-[32m+[m[32m  },)[m[m
[31m-[32m+[m[32m  @IsNotEmpty()[m[m
[31m-[32m+[m[32m  @Transform(({ value }) => parseInt(value,10))[m[m
[31m-[32m+[m[32m  page: number;[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m  @ApiProperty({[m[m
[31m-[32m+[m[32m    name: 'limit',[m[m
[31m-[32m+[m[32m    description: 'Default page = 10, Enter more than that to retrieve data.',[m[m
[31m-[32m+[m[32m    example: 10,[m[m
[31m-[32m+[m[32m    default: 10,[m[m
[31m-[32m+[m[32m    required: true,[m[m
[31m-[32m+[m[32m  })[m[m
[31m-[32m+[m[32m  @IsNotEmpty()[m[m
[31m-[32m+[m[32m  @Transform(({ value }) => parseInt(value,10))[m[m
[31m-[32m+[m[32m  limit: number;[m[m
[31m- }[m[m
[31m- export class IChangePassword extends PickType(IUserRegisterDto ,['email','mobileNo','password'] as const){[m[m
[31m- [m[m
[31m-[1mdiff --git a/src/modules/users/users.service.ts b/src/modules/users/users.service.ts[m[m
[31m-[1mindex eaa528c..51090aa 100644[m[m
[31m-[1m--- a/src/modules/users/users.service.ts[m[m
[31m-[1m+++ b/src/modules/users/users.service.ts[m[m
[31m-[36m@@ -8,7 +8,7 @@[m [mimport Twilio from '../../helpers/twilio.helper'[m[m
[31m- import { TIME } from '../../constant';[m[m
[31m- import * as UserDto from './users.dto';[m[m
[31m- import { USER_REPOSITORY, MESSAGES } from 'src/constant';[m[m
[31m-[31m-import { Op } from "sequelize";[m[m
[31m-[32m+[m[32mimport { Op, WhereOptions } from "sequelize";[m[m
[31m- import { TokensService } from "../tokens/token.service";[m[m
[31m- [m[m
[31m- [m[m
[31m-[36m@@ -21,7 +21,7 @@[m [mexport default class UsersService {[m[m
[31m- [m[m
[31m-   async register([m[m
[31m-     data: UserDto.IUserRegisterDto[m[m
[31m-[31m-  ): Promise<{ message: string }> { [m[m
[31m-[32m+[m[32m  ): Promise<{ message: string }> {[m[m
[31m-     if (data.mobileNo.toString().length !== 10) {[m[m
[31m-       throwError(MESSAGES.ERROR.INVALID_MOBILE_NO);[m[m
[31m-     }[m[m
[31m-[36m@@ -29,7 +29,8 @@[m [mexport default class UsersService {[m[m
[31m-     if (user) throwError(MESSAGES.ERROR.USER_EXIST)[m[m
[31m- [m[m
[31m-     data.password = await Utilities.hashPassword(data.password)[m[m
[31m-[31m-    await this.userRepository.create<User>({ ...data });[m[m
[31m-[32m+[m[32m    const employeeId = await Utilities.generateHexadecimal(data.fullName)[m[m
[31m-[32m+[m[32m    await this.userRepository.create<User>({ ...data, employeeId: employeeId });[m[m
[31m-     return { message: "Registration successful" };[m[m
[31m-   }[m[m
[31m- [m[m
[31m-[36m@@ -45,7 +46,7 @@[m [mexport default class UsersService {[m[m
[31m-     console.log(tokens.refreshToken)[m[m
[31m-     await this.updateUser({ email: User.email }, { refreshToken: tokens.refreshToken });[m[m
[31m-     return tokens[m[m
[31m-[31m-    [m[m
[31m-[32m+[m[m
[31m-   }[m[m
[31m- [m[m
[31m-   async IsMobileOrEmailValid(email: string, mobileNo: number): Promise<void> {[m[m
[31m-[36m@@ -146,7 +147,7 @@[m [mexport default class UsersService {[m[m
[31m- [m[m
[31m-     const user = await this.userRepository.findOne({[m[m
[31m-       where: query,[m[m
[31m-[31m-      attributes: ['password', 'id', 'email', 'mobileNo'],[m[m
[31m-[32m+[m[32m      attributes: ['id', 'email', 'mobileNo'],[m[m
[31m-     });[m[m
[31m- [m[m
[31m-     return user[m[m
[31m-[36m@@ -160,6 +161,33 @@[m [mexport default class UsersService {[m[m
[31m-     return user;[m[m
[31m-   }[m[m
[31m- [m[m
[31m-[32m+[m[32m  async searchUser([m[m
[31m-[32m+[m[32m    params: UserDto.GetParamsRequestDto,[m[m
[31m-[32m+[m[32m    filters: UserDto.GetFiltersDto[m[m
[31m-[32m+[m[32m  ): Promise<{ list: Array<User>; totalCount: number }> {[m[m
[31m-[32m+[m[32m    const { page, limit } = params;[m[m
[31m-[32m+[m[32m    console.log("params", params);[m[m
[31m-[32m+[m[32m    console.log(typeof limit,typeof page)[m[m
[31m-[32m+[m[32m    const { email, employeeId, fullName, mobileNo } = filters[m[m
[31m-[32m+[m[32m    const where: WhereOptions<User> = {};[m[m
[31m-[32m+[m[32m    if (email) where.email = email;[m[m
[31m-[32m+[m[32m    if (employeeId) where.employeeId = employeeId;[m[m
[31m-[32m+[m[32m    if (fullName) where.fullName = fullName;[m[m
[31m-[32m+[m[32m    // if (mobileNo.toString()) where.mobileNo = mobileNo;[m[m
[31m-[32m+[m[32m    console.log("data",{email,employeeId,fullName,mobileNo})[m[m
[31m-[32m+[m[32m    const { count, rows: users } = await this.userRepository.findAndCountAll({[m[m
[31m-[32m+[m[32m      where,[m[m
[31m-[32m+[m[32m      limit: limit,[m[m
[31m-[32m+[m[32m      offset: (page - 1) * limit,[m[m
[31m-[32m+[m[32m      order: [[m[m
[31m-[32m+[m[32m        ['createdAt', 'DESC'],[m[m
[31m-[32m+[m[32m      ],[m[m
[31m-[32m+[m[32m      attributes: ['email', 'fullName', 'employeeId', 'mobileNo'][m[m
[31m-[32m+[m[32m    });[m[m
[31m-[32m+[m[m
[31m-[32m+[m[32m    return { list: users, totalCount: count };[m[m
[31m-[32m+[m[32m  }[m[m
[31m-[32m+[m[m
[31m-   async userWithError(data: object): Promise<User> {[m[m
[31m-     const User = await this.getUser(data)[m[m
[31m-     if (!User) throwError(MESSAGES.ERROR.USER_NOT_EXIST)[m[m
[1mdiff --git a/package-lock.json b/package-lock.json[m
[1mindex 161d59e..d82017f 100644[m
[1m--- a/package-lock.json[m
[1m+++ b/package-lock.json[m
[36m@@ -33,7 +33,7 @@[m
         "crypto-js": "^4.2.0",[m
         "dotenv": "^16.4.5",[m
         "mysql2": "^3.9.7",[m
[31m-        "nodemailer": "^6.9.13",[m
[32m+[m[32m        "nodemailer": "^6.9.14",[m
         "otp-generator": "^4.0.1",[m
         "passport": "^0.7.0",[m
         "passport-jwt": "^4.0.1",[m
[36m@@ -53,6 +53,7 @@[m
         "@types/express": "^4.17.17",[m
         "@types/jest": "^29.5.2",[m
         "@types/node": "^20.3.1",[m
[32m+[m[32m        "@types/nodemailer": "^6.4.15",[m
         "@types/supertest": "^6.0.0",[m
         "@types/twilio": "^3.19.3",[m
         "@types/uuid": "^9.0.8",[m
[36m@@ -2654,6 +2655,15 @@[m
         "undici-types": "~5.26.4"[m
       }[m
     },[m
[32m+[m[32m    "node_modules/@types/nodemailer": {[m
[32m+[m[32m      "version": "6.4.15",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@types/nodemailer/-/nodemailer-6.4.15.tgz",[m
[32m+[m[32m      "integrity": "sha512-0EBJxawVNjPkng1zm2vopRctuWVCxk34JcIlRuXSf54habUWdz1FB7wHDqOqvDa8Mtpt0Q3LTXQkAs2LNyK5jQ==",[m
[32m+[m[32m      "dev": true,[m
[32m+[m[32m      "dependencies": {[m
[32m+[m[32m        "@types/node": "*"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
     "node_modules/@types/passport": {[m
       "version": "1.0.16",[m
       "resolved": "https://registry.npmjs.org/@types/passport/-/passport-1.0.16.tgz",[m
[36m@@ -3757,12 +3767,12 @@[m
       }[m
     },[m
     "node_modules/braces": {[m
[31m-      "version": "3.0.2",[m
[31m-      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",[m
[31m-      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",[m
[32m+[m[32m      "version": "3.0.3",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",[m
[32m+[m[32m      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",[m
       "dev": true,[m
       "dependencies": {[m
[31m-        "fill-range": "^7.0.1"[m
[32m+[m[32m        "fill-range": "^7.1.1"[m
       },[m
       "engines": {[m
         "node": ">=8"[m
[36m@@ -5291,9 +5301,9 @@[m
       }[m
     },[m
     "node_modules/fill-range": {[m
[31m-      "version": "7.0.1",[m
[31m-      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",[m
[31m-      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",[m
[32m+[m[32m      "version": "7.1.1",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",[m
[32m+[m[32m      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",[m
       "dev": true,[m
       "dependencies": {[m
         "to-regex-range": "^5.0.1"[m
[36m@@ -7547,9 +7557,9 @@[m
       "dev": true[m
     },[m
     "node_modules/mysql2": {[m
[31m-      "version": "3.9.7",[m
[31m-      "resolved": "https://registry.npmjs.org/mysql2/-/mysql2-3.9.7.tgz",[m
[31m-      "integrity": "sha512-KnJT8vYRcNAZv73uf9zpXqNbvBG7DJrs+1nACsjZP1HMJ1TgXEy8wnNilXAn/5i57JizXKtrUtwDB7HxT9DDpw==",[m
[32m+[m[32m      "version": "3.10.2",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/mysql2/-/mysql2-3.10.2.tgz",[m
[32m+[m[32m      "integrity": "sha512-KCXPEvAkO0RcHPr362O5N8tFY2fXvbjfkPvRY/wGumh4EOemo9Hm5FjQZqv/pCmrnuxGu5OxnSENG0gTXqKMgQ==",[m
       "dependencies": {[m
         "denque": "^2.1.0",[m
         "generate-function": "^2.3.1",[m
[36m@@ -7701,9 +7711,9 @@[m
       "dev": true[m
     },[m
     "node_modules/nodemailer": {[m
[31m-      "version": "6.9.13",[m
[31m-      "resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-6.9.13.tgz",[m
[31m-      "integrity": "sha512-7o38Yogx6krdoBf3jCAqnIN4oSQFx+fMa0I7dK1D+me9kBxx12D+/33wSb+fhOCtIxvYJ+4x4IMEhmhCKfAiOA==",[m
[32m+[m[32m      "version": "6.9.14",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-6.9.14.tgz",[m
[32m+[m[32m      "integrity": "sha512-Dobp/ebDKBvz91sbtRKhcznLThrKxKt97GI2FAlAyy+fk19j73Uz3sBXolVtmcXjaorivqsbbbjDY+Jkt4/bQA==",[m
       "engines": {[m
         "node": ">=6.0.0"[m
       }[m
[1mdiff --git a/package.json b/package.json[m
[1mindex c2c2f53..dba97de 100644[m
[1m--- a/package.json[m
[1m+++ b/package.json[m
[36m@@ -44,7 +44,7 @@[m
     "crypto-js": "^4.2.0",[m
     "dotenv": "^16.4.5",[m
     "mysql2": "^3.9.7",[m
[31m-    "nodemailer": "^6.9.13",[m
[32m+[m[32m    "nodemailer": "^6.9.14",[m
     "otp-generator": "^4.0.1",[m
     "passport": "^0.7.0",[m
     "passport-jwt": "^4.0.1",[m
[36m@@ -64,6 +64,7 @@[m
     "@types/express": "^4.17.17",[m
     "@types/jest": "^29.5.2",[m
     "@types/node": "^20.3.1",[m
[32m+[m[32m    "@types/nodemailer": "^6.4.15",[m
     "@types/supertest": "^6.0.0",[m
     "@types/twilio": "^3.19.3",[m
     "@types/uuid": "^9.0.8",[m
[1mdiff --git a/src/constant/environment.setup.ts b/src/constant/environment.setup.ts[m
[1mindex 3b9bad3..239cb57 100644[m
[1m--- a/src/constant/environment.setup.ts[m
[1m+++ b/src/constant/environment.setup.ts[m
[36m@@ -27,4 +27,12 @@[m [mexport const ENVIROMENT_MANAGER = {[m
     REDIS_PORT: process.env.REDIS_PORT,[m
   },[m
   RABBIT_MQ_CONNECTION_URL: process.env.RABBIT_MQ_CONNECTION_URL,[m
[32m+[m[32m  TWILIO: {[m
[32m+[m[32m    ACCOUNTSID: process.env.ACCOUNTSID,[m
[32m+[m[32m    AUTHTOKEN: process.env.AUTHTOKEN,[m
[32m+[m[32m  },[m
[32m+[m[32m  MAILTRAP: {[m
[32m+[m[32m    USERNAME: process.env.MAILTRAP_USERNAME,[m
[32m+[m[32m    PASSWORD: process.env.MAILTRAP_PASSWORD,[m
[32m+[m[32m  },[m
 };[m
[1mdiff --git a/src/constant/index.ts b/src/constant/index.ts[m
[1mindex fff1f5f..9184992 100644[m
[1m--- a/src/constant/index.ts[m
[1m+++ b/src/constant/index.ts[m
[36m@@ -38,6 +38,7 @@[m [mexport const MESSAGES = {[m
     SIGN_UP_SUCCESS: 'You have registered successfully.',[m
     SIGN_IN_SUCCESS: 'You have logged in successfully',[m
     ACCOUNT_VERIFIED: 'Your account has been verified successfully.',[m
[32m+[m[32m    ACCOUNT_DELETED: 'Your account has been deleted successfully.',[m
     REFRESH_TOKEN: 'Refresh token successfully',[m
     OTP_VERIFIED: 'One time password has been verified successfully.',[m
     GET_USER_DETAILE: 'Get user detaile successfully.',[m
[1mdiff --git a/src/helpers/smtp.helper.ts b/src/helpers/smtp.helper.ts[m
[1mindex bed8101..845bfd5 100644[m
[1m--- a/src/helpers/smtp.helper.ts[m
[1m+++ b/src/helpers/smtp.helper.ts[m
[36m@@ -1,43 +1,42 @@[m
[31m-// import nodemailer from 'nodemailer';[m
[32m+[m[32mimport * as nodemailer from 'nodemailer';[m
[32m+[m[32mimport { EM } from '../constant';[m
[32m+[m[32mclass EmailService {[m
[32m+[m[32m  private transporter: nodemailer.Transporter;[m
 [m
[31m-// class EmailService {[m
[31m-//   private transporter;[m
[32m+[m[32m  constructor() {[m
[32m+[m[32m    this.transporter = this.initSmtp();[m
[32m+[m[32m  }[m
[32m+[m[32m  private initSmtp(): nodemailer.Transporter {[m
[32m+[m[32m    const smtpConfig = {[m
[32m+[m[32m      host: 'sandbox.smtp.mailtrap.io', // Replace with your SMTP server host[m
[32m+[m[32m      port: 2525, // Replace with the appropriate port[m
[32m+[m[32m      secure: false, // Set to true if you are using SSL/TLS[m
[32m+[m[32m      auth: {[m
[32m+[m[32m        user: EM.MAILTRAP.USERNAME,[m
[32m+[m[32m        pass: EM.MAILTRAP.PASSWORD,[m
[32m+[m[32m      },[m
[32m+[m[32m    };[m
 [m
[31m-//   constructor() {[m
[31m-//     this.transporter = nodemailer.createTransport({[m
[31m-//       service: 'gmail',[m
[31m-//       auth: {[m
[31m-//         user: 'rana5492@gmail.com', // Your email address[m
[31m-//         pass: 'Harish@5492', // Your email password or app password[m
[31m-//       },[m
[31m-//     });[m
[31m-//   }[m
[32m+[m[32m    return nodemailer.createTransport(smtpConfig);[m
[32m+[m[32m  }[m
 [m
[31m-//   //   public async sendMail() {[m
[31m-//   //     const mailOptions = {[m
[31m-//   //       from: 'rana5492@gmail.com', // Sender address[m
[31m-//   //       to: 'harishrana5492@gmail.com', // List of receivers[m
[31m-//   //       subject: 'Hello from Nodemailer', // Subject line[m
[31m-//   //       text: 'Hello world!', // Plain text body[m
[31m-//   //       html: '<b>Hello world!</b>', // HTML body[m
[31m-//   //     };[m
[31m-//   public async sendMail() {[m
[31m-//     // html: string, // text: string, // subject: string, // to: string,[m
[31m-//     const mailOptions = {[m
[31m-//       from: 'rana5492@gmail.com', // Sender address[m
[31m-//       to: 'harishrana5492@gmail.com', // List of receivers[m
[31m-//       subject: 'Hello from Nodemailer', // Subject line[m
[31m-//       text: 'Hello world!', // Plain text body[m
[31m-//       html: '<b>Hello world!</b>', // HTML body[m
[31m-//     };[m
[32m+[m[32m  public async sendMail(to: string, otp: string | number) {[m
[32m+[m[32m    // Fixed parenthesis[m
[32m+[m[32m    const mailOptions = {[m
[32m+[m[32m      from: '',[m
[32m+[m[32m      to: 'harishrana5492@gmail.com', // List of receivers[m
[32m+[m[32m      subject: 'Hello from Nodemailer', // Subject line[m
[32m+[m[32m      text: `Your OTP is ${otp}`, // Plain text body[m
[32m+[m[32m      html: `<b>Your OTP is ${otp}</b>`, // HTML body[m
[32m+[m[32m    };[m
 [m
[31m-//     try {[m
[31m-//       const info = await this.transporter.sendMail(mailOptions);[m
[31m-//       console.log('Email sent: ' + info.response);[m
[31m-//     } catch (error) {[m
[31m-//       console.error('Error sending email: ', error);[m
[31m-//     }[m
[31m-//   }[m
[31m-// }[m
[32m+[m[32m    try {[m
[32m+[m[32m      const info = await this.transporter.sendMail(mailOptions);[m
[32m+[m[32m      console.log('Email sent: ' + info.response);[m
[32m+[m[32m    } catch (error) {[m
[32m+[m[32m      console.error('Error sending email: ', error);[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
 [m
[31m-// export default new EmailService();[m
[32m+[m[32mexport default new EmailService();[m
[1mdiff --git a/src/helpers/twilio.helper.ts b/src/helpers/twilio.helper.ts[m
[1mindex f153a7e..d4a24b0 100644[m
[1m--- a/src/helpers/twilio.helper.ts[m
[1m+++ b/src/helpers/twilio.helper.ts[m
[36m@@ -1,12 +1,13 @@[m
 import * as twilio from 'twilio';[m
[32m+[m[32mimport { EM } from '../constant';[m
 [m
 class TwilioHelper {[m
   // eslint-disable-next-line @typescript-eslint/no-explicit-any[m
   private client: any; // You may want to provide a specific type for the Twilio client.[m
 [m
   constructor() {[m
[31m-    const accountSid = 'AC4c167fc67bd899ac6ab911d41ef14e90';[m
[31m-    const authToken = 'c0f98fccc3186ac2cbbfe6640aaabfdf';[m
[32m+[m[32m    const accountSid = EM.TWILIO.ACCOUNTSID;[m
[32m+[m[32m    const authToken = EM.TWILIO.AUTHTOKEN;[m
     this.client = twilio(accountSid, authToken);[m
   }[m
   // Adjust the function definition to accept an options object[m
[1mdiff --git a/src/modules/users/users.controller.ts b/src/modules/users/users.controller.ts[m
[1mindex 679363f..08829cf 100644[m
[1m--- a/src/modules/users/users.controller.ts[m
[1m+++ b/src/modules/users/users.controller.ts[m
[36m@@ -2,6 +2,7 @@[m
 import { Post, Controller, Body, HttpException, Get, UseGuards, Req, Query, Param } from "@nestjs/common";[m
 import UserService from './users.service'[m
 import * as usersDto from './users.dto'[m
[32m+[m[32mimport { User } from '../../common/decorators'[m
 import { successResponse } from '../../helpers/responseHadnlers';[m
 import { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger'[m
 import { API_OPERATIONS, MESSAGES } from "src/constant"[m
[36m@@ -92,6 +93,7 @@[m [mexport class UserController {[m
     @Post('login')[m
     async login(@Body() body: usersDto.IUserLoginDto): Promise<any> {[m
         try {[m
[32m+[m[32m            console.log("enter in api")[m
             const result = await this.userservice.login(body);[m
             return successResponse(MESSAGES.USER.SIGN_IN_SUCCESS, result)[m
         }[m
[36m@@ -112,9 +114,26 @@[m [mexport class UserController {[m
             throw new HttpException(error.message, error.status);[m
         }[m
     }[m
[32m+[m[32m    @ApiBearerAuth()[m
[32m+[m[32m    @UseGuards(AccessTokenGuard)[m
[32m+[m[32m    @Post('deleteAccount')[m
[32m+[m[32m    async deleteAccount([m
[32m+[m[32m        @User() user: Record<string, any>[m
[32m+[m[32m    ) {[m
[32m+[m[32m        try {[m
[32m+[m[32m            const userId = user.userId[m
[32m+[m[32m            await this.userservice.deleteAccount(userId);[m
[32m+[m[32m            return successResponse(MESSAGES.USER.ACCOUNT_DELETED);[m
[32m+[m[32m        }[m
[32m+[m[32m        catch (error) {[m
[32m+[m[32m            throw new HttpException(error.message, error.status)[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
 [m
[31m-    // @ApiBearerAuth()[m
[31m-    // @UseGuards(AccessTokenGuard)[m
[32m+[m
[32m+[m[32m    @ApiBearerAuth()[m
[32m+[m[32m    @UseGuards(AccessTokenGuard)[m
     @Get('searchUser/:page/:limit')[m
     async getDetailOfuser([m
         @Param() params: usersDto.GetParamsRequestDto,[m
[36m@@ -122,7 +141,7 @@[m [mexport class UserController {[m
         try {[m
             console.log("yooo")[m
             // const cleanedQuery = JSON.parse(querys.filters.replace(/\s/g, ''));[m
[31m-            const result = await this.userservice.searchUser(params,querys)[m
[32m+[m[32m            const result = await this.userservice.searchUser(params, querys)[m
             return successResponse(MESSAGES.USER.GET_USER_DETAILE, result);[m
         }[m
         catch (error) {[m
[1mdiff --git a/src/modules/users/users.service.ts b/src/modules/users/users.service.ts[m
[1mindex 51090aa..88fb403 100644[m
[1m--- a/src/modules/users/users.service.ts[m
[1m+++ b/src/modules/users/users.service.ts[m
[36m@@ -4,7 +4,7 @@[m [mimport { User } from '../../common/database/entities';[m
 import { throwError } from "../../helpers/responseHadnlers";[m
 import * as Utilities from '../../helpers/utilities.helper'[m
 import Twilio from '../../helpers/twilio.helper'[m
[31m-// import EmailService from '../../helpers/smtp.helper'[m
[32m+[m[32mimport EmailService from '../../helpers/smtp.helper'[m
 import { TIME } from '../../constant';[m
 import * as UserDto from './users.dto';[m
 import { USER_REPOSITORY, MESSAGES } from 'src/constant';[m
[36m@@ -42,6 +42,7 @@[m [mexport default class UsersService {[m
     // await this.IsMobileOrEmailValid(email, mobileNo)[m
 [m
     if (!await Utilities.comparePassword(password, User.password)) throwError(MESSAGES.ERROR.INCORRECT_PASSWORD)[m
[32m+[m[32m    console.log("enter in api")[m
     const tokens = await this.getJwtTokens({ userId: User.id, email: User.email }, true, TIME.JWT.THIRTY_DAYS);[m
     console.log(tokens.refreshToken)[m
     await this.updateUser({ email: User.email }, { refreshToken: tokens.refreshToken });[m
[36m@@ -72,6 +73,12 @@[m [mexport default class UsersService {[m
     );[m
   }[m
 [m
[32m+[m[32m  async deleteAccount(userId: string): Promise<void> {[m
[32m+[m[32m    const user = await this.getUser({ id: userId });[m
[32m+[m[32m    if (!user) throwError(MESSAGES.ERROR.ACCESS_DENIED);[m
[32m+[m[32m    await this.userRepository.destroy({ where: { id: userId } });[m
[32m+[m[32m    await this.tokenService.updateRefreshToken(userId, null);[m
[32m+[m[32m  }[m
   /**[m
  * Updates the password of a user.[m
  *[m
[36m@@ -167,14 +174,14 @@[m [mexport default class UsersService {[m
   ): Promise<{ list: Array<User>; totalCount: number }> {[m
     const { page, limit } = params;[m
     console.log("params", params);[m
[31m-    console.log(typeof limit,typeof page)[m
[32m+[m[32m    console.log(typeof limit, typeof page)[m
     const { email, employeeId, fullName, mobileNo } = filters[m
     const where: WhereOptions<User> = {};[m
     if (email) where.email = email;[m
     if (employeeId) where.employeeId = employeeId;[m
     if (fullName) where.fullName = fullName;[m
[31m-    // if (mobileNo.toString()) where.mobileNo = mobileNo;[m
[31m-    console.log("data",{email,employeeId,fullName,mobileNo})[m
[32m+[m[32m    if (mobileNo.toString()) where.mobileNo = mobileNo;[m
[32m+[m[32m    console.log("data", { email, employeeId, fullName, mobileNo })[m
     const { count, rows: users } = await this.userRepository.findAndCountAll({[m
       where,[m
       limit: limit,[m
[36m@@ -200,11 +207,11 @@[m [mexport default class UsersService {[m
     const User = await this.userWithError(data)[m
     const OTP = await this.generateOtp();[m
     // const EncryptOTP = await Utilities.encryptCipher(OTP);[m
[31m-    // Twilio.sendMessage({  [m
[32m+[m[32m    // await Twilio.sendMessage({[m
     //   otp: OTP,[m
     //   to: ""[m
     // })[m
[31m-    // EmailService.sendMail()[m
[32m+[m[32m    // await EmailService.sendMail('',OTP)[m
     const token = await Utilities.encryptCipher(User.id)[m
     const expirationDate = new Date(Date.now() + TIME.OTP.OTP_EXPIRES); // 5 minutes expiration[m
 [m
