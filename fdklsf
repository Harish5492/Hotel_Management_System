[1mdiff --git a/package-lock.json b/package-lock.json[m
[1mindex 64871de..161d59e 100644[m
[1m--- a/package-lock.json[m
[1m+++ b/package-lock.json[m
[36m@@ -29,6 +29,7 @@[m
         "bcrypt": "^5.1.1",[m
         "class-transformer": "^0.5.1",[m
         "class-validator": "^0.14.1",[m
[32m+[m[32m        "cors": "^2.8.5",[m
         "crypto-js": "^4.2.0",[m
         "dotenv": "^16.4.5",[m
         "mysql2": "^3.9.7",[m
[1mdiff --git a/package.json b/package.json[m
[1mindex 7a697e5..c2c2f53 100644[m
[1m--- a/package.json[m
[1m+++ b/package.json[m
[36m@@ -40,6 +40,7 @@[m
     "bcrypt": "^5.1.1",[m
     "class-transformer": "^0.5.1",[m
     "class-validator": "^0.14.1",[m
[32m+[m[32m    "cors": "^2.8.5",[m
     "crypto-js": "^4.2.0",[m
     "dotenv": "^16.4.5",[m
     "mysql2": "^3.9.7",[m
[1mdiff --git a/src/common/database/entities/test.entity.ts b/src/common/database/entities/test.entity.ts[m
[1mindex 4aa3cd0..83c44c0 100644[m
[1m--- a/src/common/database/entities/test.entity.ts[m
[1m+++ b/src/common/database/entities/test.entity.ts[m
[36m@@ -51,9 +51,8 @@[m [mexport class Test extends Model<Test> {[m
     type: DataType.STRING,[m
     allowNull: true,[m
   })[m
[31m-  remarks: string; // Uncommented this line[m
[32m+[m[32m  remarks: string;[m
 [m
[31m-  // Define association with User model[m
   @ForeignKey(() => User)[m
   @Column({[m
     type: DataType.UUID,[m
[1mdiff --git a/src/common/database/entities/user.entity.ts b/src/common/database/entities/user.entity.ts[m
[1mindex 8dec555..15196ae 100644[m
[1m--- a/src/common/database/entities/user.entity.ts[m
[1m+++ b/src/common/database/entities/user.entity.ts[m
[36m@@ -18,6 +18,13 @@[m [mexport class User extends Model<User> {[m
     })[m
     id: string;[m
 [m
[32m+[m[32m    @Column({[m
[32m+[m[32m        type:DataType.UUID,[m
[32m+[m[32m        defaultValue: DataType.UUIDV4,[m
[32m+[m[32m        allowNull : false,[m
[32m+[m[32m    })[m
[32m+[m[32m    employeeId: string;[m
[32m+[m
     @Column({[m
         type: DataType.STRING,[m
         allowNull: false,[m
[36m@@ -34,13 +41,7 @@[m [mexport class User extends Model<User> {[m
         type: DataType.STRING,[m
         allowNull: false,[m
     })[m
[31m-    firstName: string;[m
[31m-[m
[31m-    @Column({[m
[31m-        type: DataType.STRING,[m
[31m-        allowNull: false,[m
[31m-    })[m
[31m-    lastName: string;[m
[32m+[m[32m    fullName: string;[m
 [m
     @Column({[m
         type: DataType.DOUBLE,[m
[1mdiff --git a/src/helpers/utilities.helper.ts b/src/helpers/utilities.helper.ts[m
[1mindex dba3ed5..b7f402e 100644[m
[1m--- a/src/helpers/utilities.helper.ts[m
[1m+++ b/src/helpers/utilities.helper.ts[m
[36m@@ -1,5 +1,6 @@[m
 import * as bcrypt from 'bcrypt';[m
 import * as CryptoJS from 'crypto-js';[m
[32m+[m[32mimport * as crypto from 'crypto';[m
 import * as otpGenerator from 'otp-generator';[m
 import { TIME } from '../constant';[m
 import { EM } from '../constant';[m
[36m@@ -29,6 +30,30 @@[m [mexport const decryptCipher = (data: string) => {[m
   );[m
   return parsedToken;[m
 };[m
[32m+[m
[32m+[m[32mexport const generateHexadecimal = (name: string) => {[m
[32m+[m[32m  // Combine name, email, and a random component with the current time[m
[32m+[m[32m  const seed = `${name}${Math.floor(Math.random() * 1e6)}${Date.now()}`;[m
[32m+[m
[32m+[m[32m  // Create a SHA-256 hash of the seed[m
[32m+[m[32m  const hash = crypto.createHash('sha256');[m
[32m+[m[32m  hash.update(seed);[m
[32m+[m
[32m+[m[32m  // Get the hexadecimal representation of the hash[m
[32m+[m[32m  const hexNumber = hash.digest('hex');[m
[32m+[m
[32m+[m[32m  // Extract the first 16 characters (or adjust as needed)[m
[32m+[m[32m  const uniqueHex = hexNumber.slice(0, 16);[m
[32m+[m
[32m+[m[32m  // Reflect the first 3 characters of the name and email[m
[32m+[m[32m  const reflectedFirstName = name.slice(0, 3).toUpperCase(); // Ensure uppercase, adjust as needed[m
[32m+[m
[32m+[m[32m  // Concatenate the unique hex with reflected parts[m
[32m+[m[32m  const combinedId = `${reflectedFirstName}-${uniqueHex}`;[m
[32m+[m
[32m+[m[32m  return combinedId;[m
[32m+[m[32m};[m
[32m+[m
 export const generateOneTimeCode = ([m
   size: number,[m
 ): { otp: string; otpExpires: number } => {[m
[1mdiff --git a/src/main.ts b/src/main.ts[m
[1mindex 28ae722..789a70d 100644[m
[1m--- a/src/main.ts[m
[1m+++ b/src/main.ts[m
[36m@@ -2,15 +2,23 @@[m [mimport { NestFactory } from '@nestjs/core';[m
 import { AppModule } from './app.module';[m
 import { INestApplication, ValidationPipe } from '@nestjs/common';[m
 import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';[m
[32m+[m[32mimport * as cors from 'cors';[m
 [m
 async function bootstrap() {[m
[31m-  const app = await NestFactory.create(AppModule);[m
[31m-  app.useGlobalPipes(new ValidationPipe());[m
[32m+[m[32m  const app = await NestFactory.create(AppModule, {[m
[32m+[m[32m    logger: ['log', 'error', 'warn'],[m
[32m+[m[32m  });[m
[32m+[m[32m  initMiddlewares(app);[m
   initSwaggerDocs(app); // Initialize Swagger before listening to ensure it's set up[m
   await app.listen(3307);[m
   console.log('Server is running on http://localhost:3307');[m
 }[m
[31m-[m
[32m+[m[32masync function initMiddlewares(app: INestApplication) {[m
[32m+[m[32m  app.useGlobalPipes(new ValidationPipe({ transform: true }));[m
[32m+[m[32m  // app.setGlobalPrefix('api/v1');[m
[32m+[m[32m  app.enableCors({ origin: '*' });[m
[32m+[m[32m  app.use(cors());[m
[32m+[m[32m}[m
 async function initSwaggerDocs(app: INestApplication) {[m
   const config = new DocumentBuilder()[m
     .setTitle('User')[m
[1mdiff --git a/src/modules/users/users.controller.ts b/src/modules/users/users.controller.ts[m
[1mindex a39d513..679363f 100644[m
[1m--- a/src/modules/users/users.controller.ts[m
[1m+++ b/src/modules/users/users.controller.ts[m
[36m@@ -1,11 +1,13 @@[m
 /* eslint-disable prettier/prettier */[m
[31m-import { Post, Controller, Body, HttpException, Get, UseGuards, Req } from "@nestjs/common";[m
[32m+[m[32mimport { Post, Controller, Body, HttpException, Get, UseGuards, Req, Query, Param } from "@nestjs/common";[m
 import UserService from './users.service'[m
 import * as usersDto from './users.dto'[m
 import { successResponse } from '../../helpers/responseHadnlers';[m
 import { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger'[m
 import { API_OPERATIONS, MESSAGES } from "src/constant"[m
 import { AccessTokenGuard } from "src/common/guard/accesstoken.guard";[m
[32m+[m
[32m+[m
 @ApiTags('USERS')[m
 @Controller('users')[m
 export class UserController {[m
[36m@@ -110,6 +112,25 @@[m [mexport class UserController {[m
             throw new HttpException(error.message, error.status);[m
         }[m
     }[m
[32m+[m
[32m+[m[32m    // @ApiBearerAuth()[m
[32m+[m[32m    // @UseGuards(AccessTokenGuard)[m
[32m+[m[32m    @Get('searchUser/:page/:limit')[m
[32m+[m[32m    async getDetailOfuser([m
[32m+[m[32m        @Param() params: usersDto.GetParamsRequestDto,[m
[32m+[m[32m        @Query() querys: usersDto.GetFiltersDto): Promise<any> {[m
[32m+[m[32m        try {[m
[32m+[m[32m            console.log("yooo")[m
[32m+[m[32m            // const cleanedQuery = JSON.parse(querys.filters.replace(/\s/g, ''));[m
[32m+[m[32m            const result = await this.userservice.searchUser(params,querys)[m
[32m+[m[32m            return successResponse(MESSAGES.USER.GET_USER_DETAILE, result);[m
[32m+[m[32m        }[m
[32m+[m[32m        catch (error) {[m
[32m+[m[32m            throw new HttpException(error.message, error.status)[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
     @ApiBearerAuth()[m
     @UseGuards(AccessTokenGuard)[m
     @ApiOperation(API_OPERATIONS.USER.UPDATE_PASSWORD)[m
[1mdiff --git a/src/modules/users/users.dto.ts b/src/modules/users/users.dto.ts[m
[1mindex 67f6f5b..a8f027d 100644[m
[1m--- a/src/modules/users/users.dto.ts[m
[1m+++ b/src/modules/users/users.dto.ts[m
[36m@@ -1,12 +1,14 @@[m
 /* eslint-disable prettier/prettier */[m
 import { ApiProperty, PickType } from '@nestjs/swagger';[m
[32m+[m[32mimport { Transform } from 'class-transformer';[m
 import {[m
   IsEmail,[m
   IsNotEmpty,[m
   MinLength,[m
   IsNumber,[m
   ValidateIf,[m
[31m-  IsString[m
[32m+[m[32m  IsString,[m
[32m+[m[32m  IsOptional[m
 } from 'class-validator';[m
 [m
 export class IUserRegisterDto {[m
[36m@@ -16,7 +18,7 @@[m [mexport class IUserRegisterDto {[m
   @ApiProperty({[m
     name: 'email',[m
     description: 'Send email if using logintype=EMAIL',[m
[31m-    example: 'note@wallet.com',[m
[32m+[m[32m    example: 'note@gmail.com',[m
     required: true,[m
   })[m
   email?: string;[m
[36m@@ -25,7 +27,7 @@[m [mexport class IUserRegisterDto {[m
   @ValidateIf((object) => !object.email)[m
   @IsNotEmpty()[m
   @ApiProperty({[m
[31m-    name: 'mobileNo',[m
[32m+[m[32m    name: 'mobileNo',[m[41m [m
     description: 'Send mobileNo if using logintype=MOBILE. Length of the mobileNo',[m
     example: '9090012214',[m
     required: true,[m
[36m@@ -35,22 +37,12 @@[m [mexport class IUserRegisterDto {[m
   @IsNotEmpty()[m
   @MinLength(3)[m
   @ApiProperty({[m
[31m-    name: 'firstName',[m
[31m-    description: 'firstName length should be 3 or more than that',[m
[31m-    example: 'Harish',[m
[32m+[m[32m    name: 'fullName',[m
[32m+[m[32m    description: 'fullname length should be 3 or more than that',[m
[32m+[m[32m    example: 'Harish Rana',[m
     required: true[m
   })[m
[31m-  firstName: string;[m
[31m-[m
[31m-  @IsNotEmpty()[m
[31m-  @MinLength(3)[m
[31m-  @ApiProperty({[m
[31m-    name: 'lastName',[m
[31m-    description: 'LastName length should be 3 or more than that',[m
[31m-    example: 'Rana',[m
[31m-    required: true[m
[31m-  })[m
[31m-  lastName: string;[m
[32m+[m[32m  fullName: string;[m
   [m
   @IsNotEmpty()[m
   @MinLength(3)[m
[36m@@ -76,6 +68,73 @@[m [mexport class IUserRegisterDto {[m
 [m
 export class IUserLoginDto extends PickType(IUserRegisterDto ,['email','mobileNo','password'] as const){[m
 [m
[32m+[m[32m}[m
[32m+[m[32mexport class GetFiltersDto {[m
[32m+[m[32m  @IsOptional()[m
[32m+[m[32m  @IsEmail()[m
[32m+[m[32m  @ApiProperty({[m
[32m+[m[32m    name: 'email',[m
[32m+[m[32m    description: 'Send email if using logintype=EMAIL',[m
[32m+[m[32m    example: 'note@gmail.com',[m
[32m+[m[32m    required:false[m
[32m+[m[32m  })[m
[32m+[m[32m  email?: string;[m
[32m+[m
[32m+[m[32m  @IsOptional()[m
[32m+[m[32m  @IsString()[m
[32m+[m[32m  @ApiProperty({[m
[32m+[m[32m    name: 'employeeId',[m
[32m+[m[32m    description: 'get the unique id of the employee',[m
[32m+[m[32m    example: 'HAR-7a53046d66c93b5e',[m
[32m+[m[32m    required:false[m
[32m+[m[32m  })[m
[32m+[m[32m  employeeId?: string;[m
[32m+[m
[32m+[m[32m  @IsOptional()[m
[32m+[m[32m  @IsNumber()[m
[32m+[m[32m  @ApiProperty({[m
[32m+[m[32m    name: 'mobileNo',[m[41m [m
[32m+[m[32m    description: 'Send mobileNo if using logintype=MOBILE. Length of the mobileNo',[m
[32m+[m[32m    example: '9090012214',[m
[32m+[m[32m    required:false,[m
[32m+[m[32m  })[m
[32m+[m[32m  mobileNo?: number;[m
[32m+[m
[32m+[m[32m  @IsOptional()[m
[32m+[m[32m  @ApiProperty({[m
[32m+[m[32m    name: 'fullName',[m
[32m+[m[32m    description: 'fullname length should be 3 or more than that',[m
[32m+[m[32m    example: 'Harish Rana',[m
[32m+[m[32m    required:false[m
[32m+[m[32m  })[m
[32m+[m[32m  fullName?: string;[m
[32m+[m
[32m+[m[32m  @IsOptional()[m
[32m+[m[32m  filters?: Record<string, any>; // Allow any filter types[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mexport class GetParamsRequestDto {[m
[32m+[m[32m  @ApiProperty({[m
[32m+[m[32m    name: 'page',[m
[32m+[m[32m    description: 'Default page = 1, Enter more than that to retrieve data.',[m
[32m+[m[32m    example: 1,[m
[32m+[m[32m    default: 1,[m
[32m+[m[32m    required: true,[m
[32m+[m[32m  },)[m
[32m+[m[32m  @IsNotEmpty()[m
[32m+[m[32m  @Transform(({ value }) => parseInt(value,10))[m
[32m+[m[32m  page: number;[m
[32m+[m
[32m+[m[32m  @ApiProperty({[m
[32m+[m[32m    name: 'limit',[m
[32m+[m[32m    description: 'Default page = 10, Enter more than that to retrieve data.',[m
[32m+[m[32m    example: 10,[m
[32m+[m[32m    default: 10,[m
[32m+[m[32m    required: true,[m
[32m+[m[32m  })[m
[32m+[m[32m  @IsNotEmpty()[m
[32m+[m[32m  @Transform(({ value }) => parseInt(value,10))[m
[32m+[m[32m  limit: number;[m
 }[m
 export class IChangePassword extends PickType(IUserRegisterDto ,['email','mobileNo','password'] as const){[m
 [m
[1mdiff --git a/src/modules/users/users.service.ts b/src/modules/users/users.service.ts[m
[1mindex eaa528c..51090aa 100644[m
[1m--- a/src/modules/users/users.service.ts[m
[1m+++ b/src/modules/users/users.service.ts[m
[36m@@ -8,7 +8,7 @@[m [mimport Twilio from '../../helpers/twilio.helper'[m
 import { TIME } from '../../constant';[m
 import * as UserDto from './users.dto';[m
 import { USER_REPOSITORY, MESSAGES } from 'src/constant';[m
[31m-import { Op } from "sequelize";[m
[32m+[m[32mimport { Op, WhereOptions } from "sequelize";[m
 import { TokensService } from "../tokens/token.service";[m
 [m
 [m
[36m@@ -21,7 +21,7 @@[m [mexport default class UsersService {[m
 [m
   async register([m
     data: UserDto.IUserRegisterDto[m
[31m-  ): Promise<{ message: string }> { [m
[32m+[m[32m  ): Promise<{ message: string }> {[m
     if (data.mobileNo.toString().length !== 10) {[m
       throwError(MESSAGES.ERROR.INVALID_MOBILE_NO);[m
     }[m
[36m@@ -29,7 +29,8 @@[m [mexport default class UsersService {[m
     if (user) throwError(MESSAGES.ERROR.USER_EXIST)[m
 [m
     data.password = await Utilities.hashPassword(data.password)[m
[31m-    await this.userRepository.create<User>({ ...data });[m
[32m+[m[32m    const employeeId = await Utilities.generateHexadecimal(data.fullName)[m
[32m+[m[32m    await this.userRepository.create<User>({ ...data, employeeId: employeeId });[m
     return { message: "Registration successful" };[m
   }[m
 [m
[36m@@ -45,7 +46,7 @@[m [mexport default class UsersService {[m
     console.log(tokens.refreshToken)[m
     await this.updateUser({ email: User.email }, { refreshToken: tokens.refreshToken });[m
     return tokens[m
[31m-    [m
[32m+[m
   }[m
 [m
   async IsMobileOrEmailValid(email: string, mobileNo: number): Promise<void> {[m
[36m@@ -146,7 +147,7 @@[m [mexport default class UsersService {[m
 [m
     const user = await this.userRepository.findOne({[m
       where: query,[m
[31m-      attributes: ['password', 'id', 'email', 'mobileNo'],[m
[32m+[m[32m      attributes: ['id', 'email', 'mobileNo'],[m
     });[m
 [m
     return user[m
[36m@@ -160,6 +161,33 @@[m [mexport default class UsersService {[m
     return user;[m
   }[m
 [m
[32m+[m[32m  async searchUser([m
[32m+[m[32m    params: UserDto.GetParamsRequestDto,[m
[32m+[m[32m    filters: UserDto.GetFiltersDto[m
[32m+[m[32m  ): Promise<{ list: Array<User>; totalCount: number }> {[m
[32m+[m[32m    const { page, limit } = params;[m
[32m+[m[32m    console.log("params", params);[m
[32m+[m[32m    console.log(typeof limit,typeof page)[m
[32m+[m[32m    const { email, employeeId, fullName, mobileNo } = filters[m
[32m+[m[32m    const where: WhereOptions<User> = {};[m
[32m+[m[32m    if (email) where.email = email;[m
[32m+[m[32m    if (employeeId) where.employeeId = employeeId;[m
[32m+[m[32m    if (fullName) where.fullName = fullName;[m
[32m+[m[32m    // if (mobileNo.toString()) where.mobileNo = mobileNo;[m
[32m+[m[32m    console.log("data",{email,employeeId,fullName,mobileNo})[m
[32m+[m[32m    const { count, rows: users } = await this.userRepository.findAndCountAll({[m
[32m+[m[32m      where,[m
[32m+[m[32m      limit: limit,[m
[32m+[m[32m      offset: (page - 1) * limit,[m
[32m+[m[32m      order: [[m
[32m+[m[32m        ['createdAt', 'DESC'],[m
[32m+[m[32m      ],[m
[32m+[m[32m      attributes: ['email', 'fullName', 'employeeId', 'mobileNo'][m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    return { list: users, totalCount: count };[m
[32m+[m[32m  }[m
[32m+[m
   async userWithError(data: object): Promise<User> {[m
     const User = await this.getUser(data)[m
     if (!User) throwError(MESSAGES.ERROR.USER_NOT_EXIST)[m
